#version 460

#define PI 3.14159265358
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, binding = 2) uniform image2D imgOutput;

uniform sampler2D prevSample;
uniform float time;
uniform float speedUp;
uniform int tru;
uniform mat4 view;

float dt = 0.004;

//void geodesic(in vec4 pos, in vec4 velocity, out vec4 outPos);
void circle(in vec2 square, in vec2 size, out vec2 cirlce);
void geodesic(in vec3 velocity, in vec3 pos, precise out vec3 newvelocity);
void geodesicKerr(in vec3 rd, in vec3 position, in vec4 bPos, out vec3 newrd);
vec3 intConversionKerr (vec3 pos);
void transformKerr(in vec3 oblateCoord, out vec3 cartPos);
float atan2(in float y, in float x);
float[4][6][6] christoffelSymbols(vec2 rt);
vec4 adjustTrajectoryKerr(in vec3 rd, in vec3 ro, in vec3 spRo, int cam);
vec4 bholeB = vec4(0, 0, 0, 2);

ivec2 clamper(vec2 samp)
{
    vec2 test;
    test.x = clamp(samp.x, -1024, 1024);
    test.y = clamp(samp.y, -1024, 1024);
    return ivec2(test);
}

float tSc = 0.5;

vec4 bholeA = vec4(0*4*cos(tSc*2*time+PI/2), 0, 0*4*sin(tSc*2*time+PI/2), 2);

vec2 texRes = vec2(512+2048);
float timeVel = 1;
vec2 camOgcoords = vec2(512 - 0.1f)/(512+2048);
int cam = 0;

void main()
{
    mat4 move = mat4(1.0f);
    move[3] = view[3];

    //vec3 camog = (move*vec4(-5, 15, 0, 1)).xyz;
    vec3 camog = texture(prevSample, camOgcoords).xyz;
    //cameras origin with respect the blackhole
    //camog = camog - bholeA.xyz;
    //radial distance from camera to blackhole
    float rdist = length(camog);
    float ratio = 0.5*bholeB.w;
    bholeB.z = 0.99*ratio;
    timeVel = (1+speedUp);

    //time velocity of a stationary observer
    //timeVel = 1/sqrt(1-1/rdist);
    //timeVel = 1;
    //position in the compute shader
    vec2 globalCoord = vec2(gl_GlobalInvocationID.xy);
    ivec2 posCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 velCoord = ivec2(gl_GlobalInvocationID.xy) + ivec2(512, 0);
    vec2 scaleFactor = vec2(0.02, 1);

    vec4 presults = texture(prevSample, vec2(posCoord + 0.1f)/texRes);
    vec4 vresults = texture(prevSample, vec2(velCoord + 0.1f)/texRes);
    //texture position
    //vec2 texPos = vec2(globCoord)/1536.;
    vec4 pos;
    vec4 vels;
    vec4 test;
    vec4 altPos;
    vec4 cartPos;
    vec3 camParticle = texture(prevSample, vec2(512 - 0.1f)/(512+2048)).xyz;

    if(tru == 1){
        circle(vec2(globalCoord.xy*scaleFactor), vec2(512), globalCoord.xy);
        vec4 initialPositions = vec4(globalCoord.x, 0, globalCoord.y, 0.0f);
        pos = vec4(initialPositions.x, 0.5*(sin(5*initialPositions.x) + sin(5*initialPositions.z)), initialPositions.z, 0.03);
        vels = vec4(0*-0.2, 0*0.1, 0*-0.13, 0)*timeVel;
        if(posCoord == ivec2(511, 511)){
            pos = vec4(35, 0, 3, 0);
            //vels = vec4(-0.8, 0.07, 0.01, 0)*timeVel; 
            //vels = vec4(-sqrt(bholeA.w/length(pos)), 0, 0, 0)*timeVel; 
            vels = vec4(-0.8, 0, 0.11350525, 0)*timeVel;
            cam = 1;
        }
        altPos.xyz = intConversionKerr(pos.xyz);
        vels = adjustTrajectoryKerr(vels.xyz, pos.xyz, altPos.xyz, cam)*timeVel;
        pos.xyz = altPos.xyz;
    }
    else{
        rdist = length(camParticle - bholeA.xyz);
        pos = presults;
        vels = vresults*timeVel;
    }

    vec3 k1;
    vec3 k2;
    vec3 j1;
    vec3 j2;

    //dt *= timeVel;

    for(int i = 0; i < 25; i ++)
    {
        /*if(posCoord == ivec2(511, 511)){
            vels.xyz = vec3(-sqrt(bholeA.w/length(pos)), 0 , 0)*timeVel;
            pos.xyz += vels.xyz*dt;
            //vels = vec4(-0.8, 0.07, 0.01, 0)*timeVel; 
            //vels = vec4(-0.2, 0.2, 0, 0)*timeVel; 
            //vels = vec4(-0.8, 0, 0.11350525, 0)*timeVel; 
        }
        else{*/
        geodesicKerr(vels.xyz, pos.xyz, bholeB, j1);
        j1 *= dt;
        k1 = vels.xyz*dt;
        geodesicKerr(vels.xyz + j1, pos.xyz + k1, bholeB, j2);
        j2 *= dt;
        k2 = (vels.xyz + j1/2)*dt;

        vels.xyz += (j1+j2)/2;
        pos.xyz += (k1+k2)/2;
    }

    transformKerr(pos.xyz, cartPos.xyz);

    ivec2 newxz = clamper(vec2(cartPos.xz*102.4));
    ivec2 adjPosxz = newxz + ivec2(1536);

    imageStore(imgOutput, posCoord, pos);    
    imageStore(imgOutput, velCoord, vels/timeVel);   
    imageStore(imgOutput, adjPosxz, cartPos);  
}

void geodesic(in vec3 velocity, in vec3 pos, precise out vec3 newvelocity)
{
    //adjust pos to be relative to black hole
    pos = pos - bholeA.xyz;

    //float rdist = length(texture(prevSample, camOgcoords).xyz);
    //timeVel = (1+speedUp)/(1-1/rdist);

    //distance away from blackhole
    float r = length(pos);
    //schwarzchild radius
    float rs = bholeA.w;

    //time dialation for a stationary observer
    //float timeVel = 1/sqrt(1-rs/r);
    velocity *= 1;

    pos = normalize(pos);

    //polar unit vectors
    vec3 rvec = pos;  //radial unit vector
    vec3 pvec = normalize(cross(rvec, vec3(0, 1, 0)));  //phi unit vector
    vec3 tvec = normalize(cross(pvec, rvec));  //theta unit vector

    //conversion vectors
    //polVels.x = radial velocity vector
    //polVels.y = theta velocity vector
    //polVels.z = phi velocity vector
    vec3 polVels = vec3(dot(velocity, rvec), dot(velocity, tvec), dot(velocity, pvec));

    //theta and phi rate of change from velocity vectors
    float rdot = polVels.x;
    float tdot = polVels.y;
    float pdot = polVels.z;

    //adjustment term for using coordinate time
    float coordTval = (rs/(r*(r-rs)))*rdot;

    //repeated term
    float diff = r - rs;

    //radial acceleration term
    float radA = (rs/(2.0f*r*(diff)))*(rdot*rdot) + (-rs)*(tdot*tdot+pdot*pdot)/(r*r) - (rs*(1-rs/r)/(2.0f*r*r))*timeVel*timeVel+coordTval*rdot;

    //rad acceleration vector
    polVels.x = radA;
    //theta acceleration vector
    polVels.y = coordTval*tdot;
    //phi acceleration vector
    polVels.z = coordTval*pdot;

    //converting polar velocity vectors to cartesian velocity vectors
    newvelocity = polVels.x * rvec + polVels.y * tvec + polVels.z * pvec;
}

void circle(in vec2 rect, in vec2 size, out vec2 circle)
{
    float r = rect.x+2.5;
    float angle = 2*PI * rect.y/size.y;

    vec2 circ = vec2(r*cos(angle), r*sin(angle));
    circle = circ;
}

void geodesicKerr(in vec3 rd, in vec3 position, in vec4 bPos, out vec3 newrd){
    //adjust pos variable to be relative to black hole
    //vec3 pos = position - bPos.xyz;
    float rs = bPos.w;
    float a = bPos.z;

    //distance away from blackhole
    float r = position.x;

    //theta angle
    float theta = abs(position.y);
    float sint = sin(theta);
    float cost = cos(theta);

    float tri = r*r-rs*r+a*a;
    float p = r*r + a*a*cost*cost;

    //schwarzchild radius
    float diff = r - rs;

    //theta and phi rate of change from velocity vectors
    float rdot = rd.x;
    float tdot = rd.y;
    float pdot = rd.z;

    //three velocities
    vec3 THVels = vec3(rdot, tdot, pdot);

    //repeated term
    float[4][6][6] chrSym = christoffelSymbols(vec2(r, theta));
    //timeVel = 1;

    //adjustment term for coordinate time

    float coordTime = (rs/(2*r*(diff)))*(rdot)*timeVel;

    vec4 coordTval = 2*vec4(chrSym[0][0][1], chrSym[0][0][2], chrSym[0][1][3], chrSym[0][2][3]);
    coordTval *= vec4(timeVel*rdot, timeVel*tdot, rdot*pdot, tdot*pdot);
    //coordTval.x *= rdot*timeVel;

    //radial acceleration term

    //rad acceleration vector
    float radA = -chrSym[1][0][0]*timeVel*timeVel-2*(chrSym[1][0][3]*timeVel*pdot) - chrSym[1][1][1]*rdot*rdot-2*chrSym[1][1][2]*rdot*tdot-chrSym[1][2][2]*tdot*tdot-chrSym[1][3][3]*pdot*pdot + dot(coordTval, THVels.xxxx);
    //theta acceleration vector
    float thetaA = -chrSym[2][0][0]*timeVel*timeVel - 2*chrSym[2][0][3]*timeVel*pdot-chrSym[2][1][1]*rdot*rdot-2*chrSym[2][1][2]*rdot*tdot - chrSym[2][2][2]*tdot*tdot - chrSym[2][3][3]*pdot*pdot + dot(coordTval, THVels.yyyy);
    //phi acceleration vector
    float phiA = -2*timeVel*(chrSym[3][0][1]*rdot+chrSym[3][0][2]*tdot)-2*pdot*(chrSym[3][1][3]*rdot+chrSym[3][2][3]*tdot) + dot(coordTval, THVels.zzzz);

    //non curved geodesics
    //float radA = r*(tdot*tdot+sint*sint*pdot*pdot);
    //float thetaA = (-2/r)*rdot*tdot+cost*sint*pdot*pdot;
    //float phiA = (-2/r)*rdot*pdot-(2*cost/sint)*tdot*pdot;
    //converting polar velocity vectors to cartesian velocity vectors
    //newrd = polVels.x * rvec + polVels.y * tvec + polVels.z * pvec;
    newrd = vec3(radA, thetaA, phiA);
    //adjustLight(newrd1, position, newrd1);
    //newrd = newrd1;
}

vec3 intConversionKerr (vec3 pos){
    float a = bholeB.z*bholeB.z;
    float d = dot(pos, pos);
    float y = pos.y;

    float rCoord = sqrt((d-a+sqrt((d-a)*(d-a)+4*a*y))/2);
    float tCoord = acos(y/rCoord);
    float pCoord = atan2(pos.z, pos.x);

    return vec3(rCoord, tCoord, pCoord);
}

void transformKerr(in vec3 oblateCoord, out vec3 cartPos){
    float r = oblateCoord.x;
    float tCoord = oblateCoord.y;
    float pCoord = oblateCoord.z;
    float a = bholeB.z;

    float x;
    float y;
    float z; 

    //if(over < 0.5){
        x = sqrt(r*r+a*a) * sin(tCoord) * cos(pCoord);
        y = r * cos(tCoord);
        z = sqrt(r*r+a*a) * sin(tCoord) * sin(pCoord);
    //}
    /*else{
        x = sqrt(r*r+a*a) * cos(tCoord) * cos(pCoord);
        y = r * sin(tCoord);
        z = sqrt(r*r+a*a) * cos(tCoord) * sin(pCoord);
    }*/

    //outputs cartesian coordinates
    cartPos = vec3(x, y, z);
}

float atan2(in float y, in float x)
{
    return x == 0.0 ? sign(y)*PI/2 : atan(y, x);
}

float[4][6][6] christoffelSymbols(vec2 rt){
    float r = rt.x;
    float theta = rt.y;
    float sint = sin(theta);
    float cost = cos(theta);
    float rs = bholeB.w;
    float a = bholeB.z;

    //triangle symbol
    float tri = r*r-r*rs+a*a;
    float p = r*r+a*a*cost*cost;

    float rp = 2*r*r-p;
    float ra = r*r+a*a;
    float ar = r*r-a*a;
    float sc = sint*cost;
    float ss = sint*sint;
    float pq = p*p;
    float ps = p*p*p;
    float[4][6][6] christoffelKerr;
    
    //time components
    christoffelKerr[0][0][1] = (rs*ra*rp/(2*pq*tri));
    christoffelKerr[0][0][2] = (-a*a*rs*r*sc/(pq));
    christoffelKerr[0][1][3] = ((-rs*a*ss)*(p*(ar)+2*r*r*(ra)))/(2*pq*tri);
    christoffelKerr[0][2][3] = (rs*a*a*a*r)*(sc*ss)/(pq);

    //radial components
    christoffelKerr[1][0][0] = rs*tri*rp/(2*ps);
    christoffelKerr[1][0][3] = (-rs*a*tri*rp*ss/(2*ps));
    christoffelKerr[1][1][1] = (2*r*a*a*ss-rs*(rp))/(2*p*tri);
    christoffelKerr[1][1][2] = (-a*a*sc/p);
    christoffelKerr[1][2][2] = (-r*tri)/p;
    christoffelKerr[1][3][3] = (tri*ss)*(rs*a*a*ss*rp-2*r*pq)/(2*ps);

    //theta components
    christoffelKerr[2][0][0] = -a*a*rs*r*sc/ps;
    christoffelKerr[2][0][3] = a*rs*r*ra*sc/ps;
    christoffelKerr[2][1][1] = a*a*sc/(p*tri);
    christoffelKerr[2][1][2] = r/p;
    christoffelKerr[2][2][2] = christoffelKerr[1][1][2];
    christoffelKerr[2][3][3] = (pq/(rs*r)+(1+p/ra)*a*a*ss)*(-ra*rs*r*sc)/(ps);

    //phi components
    christoffelKerr[3][0][1] = rs*a*rp/(2*pq*tri);
    christoffelKerr[3][0][2] = -rs*a*r*cost/(pq*sint);
    christoffelKerr[3][1][3] = rs*(a*a*a*a*sc*sc-r*r*(ra+p-2*pq/(rs*r)))/(2*pq*tri);
    christoffelKerr[3][2][3] = cost*(pq+r*a*a*rs*ss)/(pq*sint);
    return christoffelKerr;
}

vec4 adjustTrajectoryKerr(in vec3 rd, in vec3 ro, in vec3 altRo, int cam)
{
    float x = ro.x;
    float z = ro.z;
    float d = length(ro.xz);

    //spin parameter
    float a = bholeB.z;;
    //r coordinates
    float r = altRo.x;
    float sinT = sin(altRo.y);
    float cosT = cos(altRo.y);
    float sinP = sin(altRo.z);
    float cosP = cos(altRo.z);
    //schwarzchild radius
    float rs = bholeB.w;

    timeVel = 1;

    float p = sqrt(r*r+a*a*cosT*cosT);
    float tri = r*r-rs*r+a*a;

    //float p = length(pos.xz);
    //common term
    float E = 1/sqrt(r*r+a*a*cosT*cosT);
    float f = sqrt(r*r+a*a);

    //1) rad 2) theta 3) phi 4) time
    vec4 tetrad = vec4(sqrt(tri)/p, 1/p, sqrt(((p*p-rs*r)/tri))/(p*sinT), 0);
    //timeVel = 1/sqrt(1-rs/r);

    //polar unit vectors
    vec3 rvec = vec3(r*sinT*cosP, cosT*f, r*sinT*sinP) * E;  //rCoord unit vector
    vec3 tvec = vec3(f*cosT*cosP, -r*sinT, f*cosT*sinP) * E; //theta unit vector
    vec3 pvec = vec3(-sinP, 0, cosP); //phi unit vector

    //gets 4 velocity in terms of new orthonomal vectors
    vec4 altVels = vec4(dot(rd, rvec), dot(rd, tvec), dot(rd, pvec), 0);

    //new 4 velocity
    vec4 adjVels = altVels*tetrad;
    if(cam < 0.5){
        //adjVels = vec4(0, 0, 1.8/(r*r), 0);
        adjVels.z = 2/(r*r);
    }   

    //particle trajectory calibrated to kerr coordinates
    return adjVels;
}