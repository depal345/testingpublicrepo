#version 460 core
#define maxsteps 2500
#define maxdist 200
#define surfdis 0.025
#define PI 3.14159265359
#define timestep 0.025
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

uniform vec2 res;
uniform float time;
uniform float fov;
uniform float rays;
uniform float timeDT;
uniform mat4 view;
uniform sampler2D testSample;
uniform sampler2D galaxy;
uniform vec3 camog;

float GetDist(vec3 p);
vec4 GetDistCol(vec3 p);
vec3 raymarch(vec3 ro, vec3 rd);
vec3 getLight(vec3 p, vec3 col);
vec3 GetNormal(vec3 p);
vec3 GetNormal(vec3 p);
float sdTorus(vec3 p, vec2 r);
float atan2(in float y, in float x);
float adjustFov(float speed, vec2 wkPos);
void geodesic(in vec3 rd, in vec3 position, in vec4 bPos, out vec3 newrd);
void adjustLight(in vec3 rd, in vec3 ro, in vec3 spRo, out vec3 initialRD);
void intConversion (in vec3 pos, out vec3 intSph);

//converts spherical components into cartesian Position vectors
void transform(in vec3 sphComp, out vec3 cartPos);
float mandelbulbSDF(vec3 p, float power);

vec3 compare(vec3 one, vec3 two, vec3 three);

vec2 texRes = vec2(512+2048);

//time scale
float tSc = 0.5;
float radG = 50;
vec4 bholeA = vec4(0, 0, 0, 2);
float timeVel = 1/sqrt(1-1/1.5);

void main()
{
    ivec2 texCoords = ivec2(gl_GlobalInvocationID.xy);
    vec3 camPos = texture(testSample, vec2(512 - 0.1f)/(512+2048)).xyz;
    vec3 camVel = texture(testSample, (vec2(512 - 0.1f)+vec2(512, 0))/(512+2048)).xyz;

    vec2 pos = vec2(texCoords);
    float camSpeed = length(camVel);

    pos = (pos-0.5*res)/(res.y/2);

    float newFov = adjustFov(camSpeed, pos + vec2(0.01));

    vec3 col = vec3(0);
    mat4 move = mat4(1.0f);
    move[3] = view[3];

    mat4 look = mat4(1.0f);
    look[0] = view[0];
    look[1] = view[1];
    look[2] = view[2];

    //vec3 ro = (move*vec4(10, 0, 0.0, 1)).xyz;
    vec3 ro = camPos + vec3(0, 0, 0);
    float a = PI/7;
    vec3 nd = normalize(vec3(pos.xy+0.01f, newFov));
    vec3 rd = normalize((look*vec4(nd, 1)).xyz);

    //ray origin in spherical coordinates
    vec3 sphRO;

    //light velocity vector components in spherical coordinates
    vec3 sphRD;

    //convert light origin to spherical coordinates
    intConversion(ro, sphRO);

    //adjusts light rays according to schwarzchild coordinates
    adjustLight(rd, ro, sphRO, sphRD);
    
    col = raymarch(sphRO, sphRD);

    vec4 color = vec4(col, 1);

    imageStore(imgOutput, texCoords, color);         
}

float adjustFov(float speed, vec2 wkPos)
{
    float d = length(wkPos);
    float ref = 2.16647259748;
    float angle = atan(d/ref);
    float adj = (cos(angle)-speed)/(1-speed*cos(angle));
    return d*tan(PI/2 - acos(adj));
}

vec3 raymarch(vec3 ro, vec3 rd){
    float dO = 0.;
    float d = 0.;
    vec3 p = ro;
    vec3 color = vec3(0);
    vec3 rdk2;

    vec3 k1;
    vec3 k2;
    vec3 k3;
    vec3 k4;
    vec3 j1;
    vec3 j2;
    vec3 j3;
    vec3 j4;
    
    vec3 b1;
    vec3 b2;
    vec3 vb1;
    vec3 vb2;

    float dt = timestep + timeDT;

    //vector variable for cartesian position
    vec3 cartP;

    for (int i = 0; i < maxsteps + 1000*rays; i ++){
        //p += rd*dt;
        transform(p, cartP);

        vec4 dS = GetDistCol(cartP);

        //if(length(cartP - bholeA.xyz)/bholeA.w < 1.0001){
            //color = vec3(0);
            //break;
        //}

        if(dS.w < surfdis){
            color = getLight(cartP, dS.xyz);
            break;
        }
        //rd.xy += acc*0.0002;
        //geodesic(rd, p, rd);
        vec3 testt;

        dt = timestep * length(cartP - bholeA.xyz)/bholeA.w;
        //dt = timestep * length(p - bholeA.xyz)/0.5;

        dt = clamp(dt, timestep, 0.08);
        //vec4 bholeC = vec4(0, 10, 0, 2);
        //if(mod(i, 2) == 0){
        geodesic(rd, p, bholeA, j1);
        j1 *= dt;
        k1 = rd*dt;

        //rd += j1;
        //p += k1;
        
        geodesic(rd + j1, p+k1, bholeA, j2);
        j2 *= dt;
        k2 = (rd + j1/2)*dt;

        rd += (j1 + j2)/2;    
        p += (k1 + k2)/2;
    }

    return color;
}

void adjustLight(in vec3 rd, in vec3 ro, in vec3 spRo, out vec3 initialRD)
{
    vec3 pos = ro;

    //transform(spRo, pos);

    //distance away from blackhole
    float r = spRo.x;
    float sinT = sin(spRo.y);
    //schwarzchild radius
    float rs = bholeA.w;

    float p = length(pos.xz);
    //common term
    //float j = 1-rs/r;
    float j = sqrt(1-rs/r);
    timeVel = 1/sqrt(1-rs/r);

    //pos = normalize(pos);

    float x = ro.x;
    float y = ro.y;
    float z = ro.z;

    //float xdot = rd.x;
    //float ydot = rd.y;
    //float zdot = rd.z;

    //float rdot = xdot*(x/r) + ydot*(y/r) + zdot*(z/r);
    //float tdot = xdot*(x*y/(r*r*p)) - ydot*(p/(r*r)) + zdot*(z*y/(r*r*p));
    //float pdot = xdot*(-z/(p*p)) + zdot*(x/(p*p));

    //polar unit vectors
    vec3 rvec = normalize(pos);  //radial unit vector
    vec3 pvec = normalize(-cross(rvec, vec3(0, 1, 0)));  //phi unit vector
    vec3 tvec = normalize(cross(pvec, rvec));  //theta unit vector

    //polar velocity vector (.x = r, .y = t, .z = p)

    //conversion vectors
    //polVels.x = cos of angle with respect to radial unit vector
    //polVels.y = cos of angle with respect to theta unit vector
    //polVels.z = cos of angle with respect to phi unit vector
    //cos of polar vector angles relative to the spherical unit vectors
    vec3 polVels = vec3(dot(rd, rvec), dot(rd, tvec), dot(rd, pvec));

    float rdot = polVels.x*j;
    float tdot = polVels.y/r;
    float pdot = polVels.z/(r*sinT);

    //initialRD = polVels.x * rvec + polVels.y * tvec + polVels.z * pvec;
    //initialRD = vec3(polVels.x, polVels.y/r, polVels.z/(r*sin(spRo.y)));
    initialRD = vec3(rdot, tdot, pdot);
}

void geodesic(in vec3 rd, in vec3 position, in vec4 bPos, out vec3 newrd){
    //adjust pos variable to be relative to black hole
    //vec3 pos = position - bPos.xyz;

    //distance away from blackhole
    float r = position.x;

    float theta = position.y;
    //schwarzchild radius
    float rs = bPos.w;
    //timeVel = 1/sqrt(1-rs/r);
    //pos = normalize(pos);

    //polar unit vectors
    //vec3 rvec = pos;  //radial unit vector
    //vec3 pvec = normalize(cross(rvec, vec3(0, 1, 0)));  //phi unit vector
    //vec3 tvec = normalize(cross(pvec, rvec));  //theta unit vector

    //conversion vectors
    //polVels.x = radial velocity vector
    //polVels.y = theta velocity vector
    //polVels.z = phi velocity vector
    //vec3 polVels = vec3(dot(rd, rvec), dot(rd, tvec), dot(rd, pvec));

    //theta and phi rate of change from velocity vectors
    float rdot = rd.x;
    float tdot = rd.y;
    float pdot = rd.z;

    //adjustment term for using coordinate time

    //repeated term
    float diff = r - rs;

    float coordTval = (rs/(2*r*(diff)))*(rdot)*timeVel;

    //radial acceleration term

    //rad acceleration vector
    float radA = (rs/(2.0f*r*(diff)))*(rdot*rdot) + (diff)*(tdot*tdot+sin(theta)*sin(theta)*pdot*pdot) + (rs*(-diff)/(2.0f*r*r*r))*timeVel*timeVel+coordTval*rdot;
    //theta acceleration vector
    float thetaA = (-2/r)*rdot*tdot+0.5*sin(2*theta)*pdot*pdot+coordTval*tdot;
    //phi acceleration vector
    float phiA = (-2/r)*rdot*pdot-(2/tan(theta))*tdot*pdot + coordTval*pdot;

    //non curved geodesics
    //float radA = r*(tdot*tdot+sin(theta)*sin(theta)*pdot*pdot);
    //float thetaA = (-2/r)*rdot*tdot+cos(theta)*sin(theta)*pdot*pdot;
    //float phiA = (-2/r)*rdot*pdot-(2*cos(theta)/sin(theta))*tdot*pdot;
    //converting polar velocity vectors to cartesian velocity vectors
    //newrd = polVels.x * rvec + polVels.y * tvec + polVels.z * pvec;
    newrd = vec3(radA, thetaA, phiA);
    //adjustLight(newrd1, position, newrd1);
    //newrd = newrd1;
}


vec4 GetDistCol(vec3 p){
    //vec4 s = vec4(0, 2, 6, 0.5);
    //vec3 mpos = vec3(4*cos(time), 6, 5+4*sin(time));
    //float mDist = mandelbulbSDF(p - mpos, 6);
    float d = GetDist(p);
    vec3 adjD = (p);
    vec4 cold = vec4(0.0, 0.0, 0.0, d);
    float sphDist = radG-length(adjD);
    vec2 galcoord;
    float thetC = atan(-adjD.z,adjD.x);
    float u = (thetC + PI)/(2*PI);
    float phiC = acos(-adjD.y/radG);
    float v = phiC/PI;
    if(d == sphDist){
        galcoord = vec2(u, v);
        cold.xyz = texture(galaxy, galcoord).xyz;
    }
    return cold;
}

float GetDist(vec3 p){
    //vec4 s = vec4(0, 2, 6, 0.5);
    //vec3 mpos = vec3(4*cos(time), 6, 5+4*sin(time));
    //float mDist = mandelbulbSDF(p - mpos, 6);

    //grid scale
    float gscale = 102.4;

    //light ray search radius
    const int lrad = 0;
    float ssize = 0.005;

    //float yplaneDist = p.y;

    //float d = yplaneDist;
    float d = 100;
    vec3 sxz;

    vec2 atlastest;
    float sDist;

    for(int i = 0; i < lrad; i ++){
        for(int j = 0; j < lrad; j ++){
            atlastest = ivec2(p.xz*gscale) + ivec2(i, j) + 1536 - 1;
            atlastest /= texRes;
            sxz = texture(testSample, atlastest).xyz;
            sDist = length(p - sxz) - ssize;
            d = min(d, sDist);
        }
    }


    //vec4 t = vec4(5, 0, 0, 1);
    vec3 adjD = (p-vec3(0, 0, 0));
    float sphDist = radG-length(adjD);

    //float d = min(sDist, zplaneDist);
    //d = min(d, yplaneDist);
    //d = min(d, zplaneDist);
    d = min(d, sphDist);
    return d;
}

vec3 compare(vec3 one, vec3 two, vec3 three){
    vec3 final = one;
    vec3 onetwo = (one-two)/two;
    vec3 onethree = (one-three)/three;
    vec3 twothree = (two-three)/three;
    if(abs(onetwo.x) < 0.05 && abs(onetwo.y) < 0.05 && abs(onetwo.z) < 0.05)
    {
        final = one;
    }
    if(abs(onethree.x) < 0.05 && abs(onethree.y) < 0.05 && abs(onethree.z) < 0.05)
    {
        final = two;
    }
    if(abs(twothree.x) < 0.05 && abs(twothree.y) < 0.05 && abs(twothree.z) < 0.05)
    {
        final = three;
    }
    return final;
}

vec3 getLight(vec3 p, vec3 col){
    vec3 light = vec3(0, 15, 10);
    vec3 lColor = vec3(0.8078, 0.2118, 0.2118);

    if(col != vec3(0.0f)){
        lColor = col;
    }

    vec3 l = normalize(light - p);
    vec3 n = GetNormal(p);

    float dif = clamp(dot(n, l), 0.2, 1.0);
    //float dif = dot(n, l)+0.5;

    return dif * lColor;
}

vec3 GetNormal(vec3 p){
    float d = GetDist(p);
    vec2 e = vec2(.01, 0);

    vec3 n = d - vec3(
        GetDist(p - e.xyy),
        GetDist(p - e.yxy),
        GetDist(p - e.yyx)
    );

    return normalize(n);
}

//spherical to cartesian coordinates
void transform(in vec3 sphComp, out vec3 cartPos){
    float radius = sphComp.x;
    float theta = sphComp.y;
    float phi = sphComp.z;

    float x = radius * sin(theta) * cos(phi);
    float y = radius * cos(theta);
    float z = radius * sin(theta) * sin(phi);

    //outputs cartesian coordinates
    cartPos = vec3(x, y, z);
}

//gets initial spherical coordinates from initial cartesian coordinates
void intConversion (in vec3 pos, out vec3 intSph)
{
    //initial radius component
    float p = length(pos.xz);

    float intRad = length(pos);
    //initial theta component
    float intTheta = acos(pos.y/intRad);
    //float intTheta = atan2(p, pos.y);
    //initial phi component
    //float intPhi = sign(pos.z)*acos(normalize(pos.xz).x);
    float intPhi = atan2(pos.z, pos.x);
    if(pos.x == 0){
        intPhi = 0;
    }

    //outputs the initial spherical coordinates
    intSph = vec3(intRad, intTheta, intPhi);
}

float atan2(in float y, in float x)
{
    return x == 0.0 ? sign(y)*PI/2 : atan(y, x);
}