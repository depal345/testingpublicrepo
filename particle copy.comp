#version 460

#define PI 3.14159265358
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, binding = 2) uniform image2D imgOutput;

uniform sampler2D prevSample;
uniform float time;
uniform float speedUp;
uniform int tru;
uniform mat4 view;

float dt = 0.004;

//void geodesic(in vec4 pos, in vec4 velocity, out vec4 outPos);
void circle(in vec2 square, in vec2 size, out vec2 cirlce);
void geodesic(in vec3 velocity, in vec3 pos, precise out vec3 newvelocity);
ivec2 clamper(vec2 samp)
{
    vec2 test;
    test.x = clamp(samp.x, -1024, 1024);
    test.y = clamp(samp.y, -1024, 1024);
    return ivec2(test);
}

float tSc = 0.5;

vec4 bholeA = vec4(0*4*cos(tSc*2*time+PI/2), 0, 0*4*sin(tSc*2*time+PI/2), 2);

vec2 texRes = vec2(512+2048);
float timeVel = 1/sqrt(1-1/1.5);

void main()
{
    mat4 move = mat4(1.0f);
    move[3] = view[3];

    //vec3 camog = (move*vec4(-5, 15, 0, 1)).xyz;
    vec3 camog = texture(prevSample, vec2(512 - 0.1f)/(512+2048)).xyz;
    //cameras origin with respect the blackhole
    //camog = camog - bholeA.xyz;
    //radial distance from camera to blackhole
    float rdist = length(camog);

    //time velocity of a stationary observer
    //timeVel = 1/sqrt(1-1/rdist);
    //timeVel = 1;
    //position in the compute shader
    vec2 globalCoord = vec2(gl_GlobalInvocationID.xy);
    ivec2 posCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 velCoord = ivec2(gl_GlobalInvocationID.xy) + ivec2(512, 0);
    vec2 scaleFactor = vec2(0.02, 1);

    vec4 presults = texture(prevSample, vec2(posCoord + 0.1f)/texRes);
    vec4 vresults = texture(prevSample, vec2(velCoord + 0.1f)/texRes);
    //texture position
    //vec2 texPos = vec2(globCoord)/1536.;
    vec4 pos;
    vec4 vels;
    vec4 test;
    vec3 camParticle = texture(prevSample, vec2(512 - 0.1f)/(512+2048)).xyz;

    if(tru == 1){
        circle(vec2(globalCoord.xy*scaleFactor), vec2(512), globalCoord.xy);
        vec4 initialPositions = vec4(globalCoord.x, 0, globalCoord.y, 0.0f);
        pos = vec4(initialPositions.xyz, 0.03);
        vels = vec4(-0.45, 0*-0.12f, 0*-0.13, 0)*timeVel;
        if(posCoord == ivec2(511, 511)){
            //pos = vec4(35, 3, 0, 0);
            pos = vec4(35, 0, 0, 0);
            //vels = vec4(-0.8, 0.07, 0.01, 0)*timeVel; 
            //vels = vec4(-0.8, 0, 0.11350525, 0)*timeVel; 
            //vels = vec4(-0.9, 0, 0, 0)*timeVel;
            vels = vec4(-sqrt(bholeA.w/length(pos.xyz)), 0, 0, 0);
        }
    }
    else{
        rdist = length(camParticle - bholeA.xyz);
        timeVel = (1+speedUp)/(1-1/rdist);
        pos = presults;
        vels = vresults*timeVel;
    }

    vec3 k1;
    vec3 k2;
    vec3 j1;
    vec3 j2;

    //dt *= timeVel;

    for(int i = 0; i < 50; i ++)
    {
        if(posCoord == ivec2(511, 511)){
            //j1 = vec3(-sqrt(bholeA.w/length(pos.xyz)), 0, 0);
            //j1 *= dt;
            //k1 = vels.xyz*dt;
            vels.xyz = vec3(-sqrt(bholeA.w/length(pos.xyz)), 0, 0)*(1+speedUp);
            pos.xyz += vels.xyz*dt;

        }
        else{
        geodesic(vels.xyz, pos.xyz, j1);
        j1 *= dt;
        k1 = vels.xyz*dt;
        geodesic(vels.xyz + j1, pos.xyz + k1, j2);
        j2 *= dt;
        k2 = (vels.xyz + j1/2)*dt;

        vels.xyz += (j1+j2)/2;
        pos.xyz += (k1+k2)/2;
        }
        //geodesic(pos, vels, pos);
    }

    ivec2 newxz = clamper(vec2(pos.xz*102.4));
    //ivec2 newxy = clamper(vec2(pos.xy*51.2));
    //ivec2 newyz = clamper(vec2(pos.yz*51.2));

    ivec2 adjPosxz = newxz + ivec2(1536);

    imageStore(imgOutput, posCoord, pos);    
    imageStore(imgOutput, velCoord, vels/(1+speedUp));   
    imageStore(imgOutput, adjPosxz, pos);
    //imageStore(imgOutput, adjPosxy, pos); 
    //imageStore(imgOutput, adjPosyz, pos);  
}

void geodesic(in vec3 velocity, in vec3 pos, precise out vec3 newvelocity)
{
    //adjust pos to be relative to black hole
    pos = pos - bholeA.xyz;

    //distance away from blackhole
    float r = length(pos);
    //schwarzchild radius
    float rs = bholeA.w;

    //time dialation for a stationary observer
    //float timeVel = 1/sqrt(1-rs/r);
    velocity *= 1;

    pos = normalize(pos);

    //polar unit vectors
    vec3 rvec = pos;  //radial unit vector
    vec3 pvec = normalize(cross(rvec, vec3(0, 1, 0)));  //phi unit vector
    vec3 tvec = normalize(cross(pvec, rvec));  //theta unit vector

    //conversion vectors
    //polVels.x = radial velocity vector
    //polVels.y = theta velocity vector
    //polVels.z = phi velocity vector
    vec3 polVels = vec3(dot(velocity, rvec), dot(velocity, tvec), dot(velocity, pvec));

    //theta and phi rate of change from velocity vectors
    float rdot = polVels.x;
    float tdot = polVels.y;
    float pdot = polVels.z;

    //adjustment term for using coordinate time
    float coordTval = (rs/(r*(r-rs)))*rdot;

    //repeated term
    float diff = r - rs;

    //radial acceleration term
    float radA = (rs/(2.0f*r*(diff)))*(rdot*rdot) + (-rs)*(tdot*tdot+pdot*pdot)/(r*r) - (rs*(1-rs/r)/(2.0f*r*r))*timeVel*timeVel+coordTval*rdot;

    //rad acceleration vector
    polVels.x = radA;
    //theta acceleration vector
    polVels.y = coordTval*tdot;
    //phi acceleration vector
    polVels.z = coordTval*pdot;

    //converting polar velocity vectors to cartesian velocity vectors
    newvelocity = polVels.x * rvec + polVels.y * tvec + polVels.z * pvec;
}

void circle(in vec2 rect, in vec2 size, out vec2 circle)
{
    float r = rect.x+1.5;
    float angle = 2*PI * rect.y/size.y;

    vec2 circ = vec2(r*cos(angle), r*sin(angle));
    circle = circ;
}